/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zisal.butop;

import id.co.telkomsigma.util.io.CommonIOUtils;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.jasypt.util.text.BasicTextEncryptor;

/**
 *
 * @author fauzi
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {        
        initComponents();
        setFrameToCenterOfScreen();
    }

    private void setFrameToCenterOfScreen(){
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEncription = new javax.swing.JPanel();
        panelInputEncription = new javax.swing.JPanel();
        txtInputEncription = new javax.swing.JTextField();
        panelOutputEncription = new javax.swing.JPanel();
        txtOutputEncription = new javax.swing.JTextField();
        btnEncript = new javax.swing.JButton();
        panelDecription = new javax.swing.JPanel();
        panelInputDecription = new javax.swing.JPanel();
        txtInput = new javax.swing.JTextField();
        panelOutputDecription = new javax.swing.JPanel();
        txtOutput = new javax.swing.JTextField();
        btnDecript = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text File Cryptography Application");
        setMinimumSize(new java.awt.Dimension(500, 350));
        setPreferredSize(new java.awt.Dimension(500, 350));
        getContentPane().setLayout(new java.awt.GridLayout(2, 1));

        panelEncription.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Encription"));
        panelEncription.setToolTipText("Encription");
        panelEncription.setLayout(new java.awt.GridLayout(2, 0));

        panelInputEncription.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Input"));
        panelInputEncription.setLayout(new java.awt.GridLayout());

        txtInputEncription.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtInputEncriptionMouseClicked(evt);
            }
        });
        panelInputEncription.add(txtInputEncription);

        panelEncription.add(panelInputEncription);

        panelOutputEncription.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Output"));
        panelOutputEncription.setLayout(new java.awt.BorderLayout());

        txtOutputEncription.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOutputEncriptionMouseClicked(evt);
            }
        });
        panelOutputEncription.add(txtOutputEncription, java.awt.BorderLayout.CENTER);

        btnEncript.setText("Encript");
        btnEncript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncriptActionPerformed(evt);
            }
        });
        panelOutputEncription.add(btnEncript, java.awt.BorderLayout.LINE_END);

        panelEncription.add(panelOutputEncription);

        getContentPane().add(panelEncription);

        panelDecription.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Decription"));
        panelDecription.setToolTipText("Decription");
        panelDecription.setLayout(new java.awt.GridLayout(2, 1));

        panelInputDecription.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Input"));
        panelInputDecription.setLayout(new java.awt.BorderLayout());

        txtInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInputFocusGained(evt);
            }
        });
        txtInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtInputMouseClicked(evt);
            }
        });
        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputActionPerformed(evt);
            }
        });
        panelInputDecription.add(txtInput, java.awt.BorderLayout.CENTER);

        panelDecription.add(panelInputDecription);

        panelOutputDecription.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Output"));
        panelOutputDecription.setLayout(new java.awt.BorderLayout());

        txtOutput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOutputMouseClicked(evt);
            }
        });
        txtOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputActionPerformed(evt);
            }
        });
        panelOutputDecription.add(txtOutput, java.awt.BorderLayout.CENTER);

        btnDecript.setText("Decript");
        btnDecript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecriptActionPerformed(evt);
            }
        });
        panelOutputDecription.add(btnDecript, java.awt.BorderLayout.LINE_END);

        panelDecription.add(panelOutputDecription);

        getContentPane().add(panelDecription);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed

    }//GEN-LAST:event_txtInputActionPerformed

    private void txtInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInputFocusGained
        
    }//GEN-LAST:event_txtInputFocusGained

    private void txtOutputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOutputMouseClicked
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtOutput.setText(selectedFile.getAbsolutePath());
            btnDecript.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtOutputMouseClicked

    private void txtInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtInputMouseClicked
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtInput.setText(selectedFile.getAbsolutePath());
            txtOutput.requestFocus();
        }
    }//GEN-LAST:event_txtInputMouseClicked

    private void btnDecriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecriptActionPerformed
        if (txtInput!= null && txtOutput != null && txtInput.getText().length() > 0 && txtOutput.getText().length() > 0){
            String password = JOptionPane.showInputDialog(null, "Input Password File", WIDTH);
            String rawInput = CommonIOUtils.read(txtInput.getText());
            BasicTextEncryptor basicTextEncryptor = new BasicTextEncryptor();
            basicTextEncryptor.setPassword(password);
            String output = basicTextEncryptor.decrypt(rawInput);
            CommonIOUtils.write(txtOutput.getText().concat("/output.txt"), output.getBytes());
        }else{
            JOptionPane.showMessageDialog(null, "Input and Output File can not be null");
        }
    }//GEN-LAST:event_btnDecriptActionPerformed

    private void txtInputEncriptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtInputEncriptionMouseClicked
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtInputEncription.setText(selectedFile.getAbsolutePath());
            txtOutputEncription.requestFocus();
        }
    }//GEN-LAST:event_txtInputEncriptionMouseClicked

    private void txtOutputEncriptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOutputEncriptionMouseClicked
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtOutputEncription.setText(selectedFile.getAbsolutePath());
            btnEncript.requestFocus();
        }
    }//GEN-LAST:event_txtOutputEncriptionMouseClicked

    private void btnEncriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncriptActionPerformed
        if (txtInputEncription.getText() != null && txtOutputEncription.getText() != null && txtInputEncription.getText().length() > 0 && txtOutputEncription.getText().length() > 0){
            String password = JOptionPane.showInputDialog(null, "Input Password File", WIDTH);
            String rawInput = CommonIOUtils.read(txtInputEncription.getText());
            BasicTextEncryptor basicTextEncryptor = new BasicTextEncryptor();
            basicTextEncryptor.setPassword(password);
            String output = basicTextEncryptor.encrypt(rawInput);
            CommonIOUtils.write(txtOutputEncription.getText().concat("/encript.txt"), output.getBytes());   
        }else{
            JOptionPane.showMessageDialog(null, "Input and Output File can not be null");
        }
    }//GEN-LAST:event_btnEncriptActionPerformed

    private void txtOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecript;
    private javax.swing.JButton btnEncript;
    private javax.swing.JPanel panelDecription;
    private javax.swing.JPanel panelEncription;
    private javax.swing.JPanel panelInputDecription;
    private javax.swing.JPanel panelInputEncription;
    private javax.swing.JPanel panelOutputDecription;
    private javax.swing.JPanel panelOutputEncription;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextField txtInputEncription;
    private javax.swing.JTextField txtOutput;
    private javax.swing.JTextField txtOutputEncription;
    // End of variables declaration//GEN-END:variables
}
